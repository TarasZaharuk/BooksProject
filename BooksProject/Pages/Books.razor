@page "/"
@inject IConfiguration Configuration
@using System
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using MudBlazor.Dialog
@using Shared
@inject ISnackbar Snackbar
@inject HttpClient httpClient

@inject NavigationManager navigationManager



<PageTitle>Books</PageTitle>
<h1>Books</h1>
<MudTable ReadOnly="_isDialogVisible" Hover="true" Style="z-index:0; display:block" Items="_getBooksList.Books" ServerData="@(new Func<TableState, Task<TableData<BookDetailsDto>>>(LoadData))"
          @ref="_table" Height="75vh" Breakpoint="Breakpoint.Sm" HorizontalScrollbar="_isDialogVisible">
    <ToolBarContent>
        @if (!_isDialogVisible)
        {
            <MudText Typo="Typo.h6">Books</MudText>
            <MudIconButton DisableRipple="_isDialogVisible" Disabled="_isDialogVisible" Icon="@Icons.Material.Outlined.Add" Color="Color.Success" OnClick="OpenDialog"></MudIconButton>
            <MudSpacer />
            <MudTextField Disabled="_isDialogVisible" T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search by Name" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        }
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="BookDetailsDto">Name</MudTableSortLabel></MudTh>
        <MudTh>Author</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Status</MudTh>
        <MudTh><div class="ml-10">Rating</div></MudTh>
        @if (_getBooksList.TotalCount > 0)
        {
            <MudTh><MudIconButton Disabled="_isDialogVisible" Class="ml-8" Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="Delete"></MudIconButton></MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))">@context.Id</MudTd>
            <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))">@context.Name</MudTd>
            <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))">@context.Author</MudTd>
            <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))">@context.Description</MudTd>
            <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))">@context.DateOfPublishing.ToShortDateString()</MudTd>
            @if (context.Status == Status.Draft)
        {
            <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))"><MudImage Class="ml-3" Src="draftImage.png" Width="20" Height="20" /></MudTd>
        }
        @if (context.Status == Status.Active)
        {
            <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))"><MudImage Class="ml-3" Src="activeImage.png" Width="20" Height="20" /></MudTd>
        }

        <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))">
            <MudRating DisableRipple="_isDialogVisible" Disabled="true" @bind-SelectedValue="context.Rating" />
        </MudTd>

        <MudTd>
            <MudFileUpload T="IBrowserFile" Context="contextFile" Accept=".txt">
                <ButtonTemplate>
                    <MudButtonGroup Variant="Variant.Outlined">
                        <MudIconButton DisableRipple="true" HtmlTag="label" Color="Color.Success"
                                       Variant="Variant.Text"
                                       Size="Size.Small"
                                       for="@contextFile.Id" Disabled="@(_isDialogVisible)">
                            Load text
                        </MudIconButton>
                        <MudIconButton DisableRipple="_isDialogVisible" Icon="@Icons.Material.Filled.Delete" Disabled="@(_isDialogVisible)" OnClick="()=>DeleteBook(context.Id)"></MudIconButton>
                    </MudButtonGroup>

                </ButtonTemplate>
            </MudFileUpload>
        </MudTd>
    </RowTemplate>
</MudTable>

<div class="d-flex flex-column align-center">
    <MudPagination Size="Size.Large" ShowFirstButton="true" ShowLastButton="true" SelectedChanged=" selectedPage => SetSelectedIndexOfTablePage(selectedPage)" Count="GetCountOfTablePages()" />
</div>

<MudDialog @bind-IsVisible="_isDialogVisible">
    <DialogContent>
        <div class="d-flex flex-column">
            <MudGrid>
                <h1 class="mt-n3 mx-auto">Create book</h1>
                <MudTextField T="string" Class="mt-n8 mx-auto" Label="Name" Required="true" @bind-Value="@Name" RequiredError="Name is required!" AutoGrow="true" FullWidth="true" />
                <MudTextField T="string" Label="Author" Required="true" @bind-Value="@Author" RequiredError="Author is required!" AutoGrow="true" FullWidth="true" />
                <MudTextField T="string" Class="mt-n2 mx-auto" HelperText="Description is not required" Required="false" @bind-Value="@Description" Lines="4" FullWidth="true" />
                <MudDatePicker PickerVariant="PickerVariant.Dialog" @bind-Date="_date" Label="Change Date" Class="pa-3" MaxDate="DateTime.Now"></MudDatePicker>
            </MudGrid>
            <div class="align-self-sm-end">
                <MudButton OnClick="@CloseDialog" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                <MudButton Class="ml-auto mr-n3 mb-1" Color="Color.Success" Disabled="@CanCreateBook()" OnClick="CreateBook">Create</MudButton>
            </div>
        </div>
    </DialogContent>
</MudDialog>


@code {

    [Inject]
    private IDialogService DialogService { get; set; } = null!;
    private GetBooksListModelDto _getBooksList = new GetBooksListModelDto();
    private MudTable<BookDetailsDto> _table = null!;
    private Random _random = new Random();
    private DateTime? _date = DateTime.Now;
    private string? _searchString;
    private string Name { get; set; } = null!;
    private string Author { get; set; } = null!;
    private string Description { get; set; } = null!;
    private bool _isDialogVisible;
    private const int _countOfBooksPerPage = 20;
    private int _indexOfSelectedTablePage;
    private int _takeBooks = _countOfBooksPerPage;
    private string? _baseAddres;
    private SortOrder _sortBooksCase;

    private async Task<TableData<BookDetailsDto>> LoadData(TableState state)
    {
        if (state.SortLabel == "name_field")
        {
            if (state.SortDirection == MudBlazor.SortDirection.Ascending)
            {
                _sortBooksCase = SortOrder.Ascending;
            }
            else if (state.SortDirection == MudBlazor.SortDirection.Descending)
            {
                _sortBooksCase = SortOrder.Descending;
            }
        }

        await LoadBooksFromServer();
        StateHasChanged();
        return new TableData<BookDetailsDto>() { Items = _getBooksList.Books };
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        _table.ReloadServerData();
    }

    private async Task DeleteBook(int id)
    {
        BookDetailsDto? book = _getBooksList.Books.SingleOrDefault(book => book.Id == id);
        if (book != null)
        {
            bool? result = await DialogService.ShowMessageBox(
        "Warning",
        $"Do you want to delete '{book.Name}' book?",
        yesText: "Delete", cancelText: "Cancel");
            if (result == true)
            {
                await httpClient.DeleteAsync($"{_baseAddres}/books/{id}");
                await _table.ReloadServerData();
            }
        }

    }

    private async Task Delete()
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        $"Do you want to delete {_getBooksList.TotalCount} books?",
        yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            await httpClient.DeleteAsync($"{_baseAddres}/books");
            await _table.ReloadServerData();
        }
    }

    private async Task CreateBook()
    {
        if (_date.HasValue)
        {
            BookAddModelDto book = new BookAddModelDto();

            book.Rating = _random.Next(1, 6);
            book.Description = Description;
            book.Name = Name;
            book.Author = Author;
            book.DateOfPublishing = _date.Value;

            await httpClient.PostAsJsonAsync($"{_baseAddres}/books", book);

            await _table.ReloadServerData();
            CloseDialog();
        }
    }

    private bool CanCreateBook()
    {
        if (string.IsNullOrWhiteSpace(Name) || string.IsNullOrWhiteSpace(Author))
            return true;
        else
            return false;
    }

    private void OpenDialog()
    {
        _isDialogVisible = true;
    }

    private void CloseDialog()
    {
        _isDialogVisible = false;
        Name = string.Empty;
        Author = string.Empty;
        Description = string.Empty;
    }

    void OpenSelectedBook(int BookId)
    {
        navigationManager.NavigateTo($"/books/{BookId}");
    }

    protected async Task LoadBooksFromServer()
    {
        _baseAddres = Configuration["BaseAddres"];
        string queryString = GetQueryString.ToQueryString(GetListRequest());
        var books = await httpClient.GetFromJsonAsync<GetBooksListModelDto>($"{_baseAddres}/books?{queryString}");
        if (books != null)
        {
            _getBooksList = books;
        }
    }

    protected int GetCountOfTablePages()
    {
        return (int)Math.Ceiling((double)_getBooksList.TotalCount / _countOfBooksPerPage);
    }

    protected async Task SetSelectedIndexOfTablePage(int index)
    {
        _indexOfSelectedTablePage = index;
        await _table.ReloadServerData();
    }

    protected int GetSkipBooksCount()
    {
        return (_indexOfSelectedTablePage - 1) * _countOfBooksPerPage;
    }

    protected GetListRequestDto GetListRequest()
    {
        GetListRequestDto getListRequest = new GetListRequestDto();

        getListRequest.SortBooksCase = _sortBooksCase;
        getListRequest.SearchBooks = _searchString;
        getListRequest.SkipBooks = GetSkipBooksCount();
        getListRequest.TakeBooks = _takeBooks;

        return getListRequest;
    }
}
