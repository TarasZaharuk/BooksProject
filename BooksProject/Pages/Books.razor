@page "/"
@inject IConfiguration Configuration
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using MudBlazor.Dialog
@using Shared
@inject ISnackbar Snackbar

@inject NavigationManager navigationManager



<PageTitle>Books</PageTitle>
<h1>Books</h1>
<MudTable ReadOnly="_isDialogVisible" Hover="true" Style="z-index:0; display:block" Items="_books" ServerData="@(new Func<TableState, Task<TableData<BookDetailsDto>>>(LoadData))"
          @ref="table" Height="80vh" Breakpoint="Breakpoint.Sm" HorizontalScrollbar="_isDialogVisible">
    <ToolBarContent>
        @if (!_isDialogVisible)
        {
            <MudText Typo="Typo.h6">Books</MudText>
            <MudIconButton DisableRipple="_isDialogVisible" Disabled="_isDialogVisible" Icon="@Icons.Material.Outlined.Add" Color="Color.Success" OnClick="OpenDialog"></MudIconButton>
            <MudSpacer />
            <MudTextField Disabled="_isDialogVisible" T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search by Name" Adornment="Adornment.Start"
                          AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
        }
    </ToolBarContent>
    <HeaderContent>
        <MudTh>Id</MudTh>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="BookDetailsDto">Name</MudTableSortLabel></MudTh>
        <MudTh>Author</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Status</MudTh>
        <MudTh><div class="ml-10">Rating</div></MudTh>
        @if (_books.Count > 0)
        {
            <MudTh><MudIconButton Disabled="_isDialogVisible" Class="ml-8" Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="Delete"></MudIconButton></MudTh>
        }
    </HeaderContent>
    <RowTemplate>
            <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))">@context.Id</MudTd>
            <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))">@context.Name</MudTd>
            <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))">@context.Author</MudTd>
            <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))">@context.Description</MudTd>
            <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))">@context.DateOfPublishing.ToShortDateString()</MudTd>
        @if (context.Status == Status.Draft)
        {
            <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))"><MudImage Class="ml-3" Src="draftImage.png" Width="20" Height="20" /></MudTd>
        }
        @if (context.Status == Status.Active)
        {
            <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))"><MudImage Class="ml-3" Src="activeImage.png" Width="20" Height="20" /></MudTd>
        }

        <MudTd @onclick="@(()=>OpenSelectedBook(context.Id))">
            <MudRating DisableRipple="_isDialogVisible" Disabled="true" @bind-SelectedValue="context.Rating" />
        </MudTd>

        <MudTd>
            <MudFileUpload T="IBrowserFile"  Context="contextFile" Accept=".txt">
                <ButtonTemplate>
                    <MudButtonGroup Variant="Variant.Outlined">
                        <MudIconButton DisableRipple="true" HtmlTag="label" Color="Color.Success"
                                       Variant="Variant.Text"
                                       Size="Size.Small"
                                       for="@contextFile.Id" Disabled="@(_isDialogVisible)">
                            Load text
                        </MudIconButton>
                        <MudIconButton DisableRipple="_isDialogVisible" Icon="@Icons.Material.Filled.Delete" Disabled="@(_isDialogVisible)" OnClick="()=>DeleteBook(context.Id)"></MudIconButton>
                    </MudButtonGroup>

                </ButtonTemplate>
            </MudFileUpload>
        </MudTd>
    </RowTemplate>
</MudTable>

<MudDialog @bind-IsVisible="_isDialogVisible">
    <DialogContent>
        <div class="d-flex flex-column">
            <MudGrid>
                <h1 class="mt-n3 mx-auto">Create book</h1>
                <MudTextField T="string" Class="mt-n8 mx-auto" Label="Name" Required="true" @bind-Value="@Name" RequiredError="Name is required!" AutoGrow="true" FullWidth="true" />
                <MudTextField T="string" Label="Author" Required="true" @bind-Value="@Author" RequiredError="Author is required!" AutoGrow="true" FullWidth="true" />
                <MudTextField T="string" Class="mt-n2 mx-auto" HelperText="Description is not required" Required="false" @bind-Value="@Description" Lines="4" FullWidth="true" />
                <MudDatePicker PickerVariant="PickerVariant.Dialog" @bind-Date="_date" Label="Change Date" Class="pa-3" MaxDate="DateTime.Now"></MudDatePicker>
            </MudGrid>
            <div class="align-self-sm-end">
                <MudButton OnClick="@CloseDialog" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                <MudButton Class="ml-auto mr-n3 mb-1" Color="Color.Success" Disabled="@CanCreateBook()" OnClick="CreateBook">Create</MudButton>
            </div>
        </div>
    </DialogContent>
</MudDialog>


@code {

    [Inject]
    private IDialogService DialogService { get; set; } = null!;
    private List<BookDetailsDto> _books = new List<BookDetailsDto>();
    private MudTable<BookDetailsDto> table = null!;
    private Random _random = new Random();
    private DateTime? _date = DateTime.Now;
    private string? _searchString;
    private string Name { get; set; } = null!;
    private string Author { get; set; } = null!;
    private string Description { get; set; } = null!;
    private bool _isDialogVisible;

    private string? _baseAddres;
    private HttpClient httpClient = new HttpClient();

    private async Task<TableData<BookDetailsDto>> LoadData(TableState state)
    {
        await LoadBooksFromServer();
        IEnumerable<BookDetailsDto> data = _books;
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;
            if (element.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        switch (state.SortLabel)
        {
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
        }
        return new TableData<BookDetailsDto>() { Items = data };
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        table.ReloadServerData();
    }

    private async Task DeleteBook(int id)
    {
        BookDetailsDto? book = _books.SingleOrDefault(book => book.Id == id);
        if (book != null)
        {
            bool? result = await DialogService.ShowMessageBox(
        "Warning",
        $"Do you want to delete '{book.Name}' book?",
        yesText: "Delete", cancelText: "Cancel");
            if (result == true)
            {
                await httpClient.DeleteAsync($"{_baseAddres}/books/{id}");
                await table.ReloadServerData();
            }
        }

    }

    private async Task Delete()
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        $"Do you want to delete {_books.Count} books?",
        yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            await httpClient.DeleteAsync($"{_baseAddres}/books");
            await table.ReloadServerData();
        }
    }

    private async Task CreateBook()
    {
        if (_date.HasValue)
        {
            BookAddModelDto book = new BookAddModelDto();

            book.Rating = _random.Next(1, 6);
            book.Description = Description;
            book.Name = Name;
            book.Author = Author;
            book.DateOfPublishing = _date.Value;

            await httpClient.PostAsJsonAsync($"{_baseAddres}/books", book);

            await table.ReloadServerData();
            CloseDialog();
        }
    }

    private bool CanCreateBook()
    {
        if (string.IsNullOrWhiteSpace(Name) || string.IsNullOrWhiteSpace(Author))
            return true;
        else
            return false;
    }

    private void OpenDialog()
    {
        _isDialogVisible = true;
    }

    private void CloseDialog()
    {
        _isDialogVisible = false;
        Name = string.Empty;
        Author = string.Empty;
        Description = string.Empty;
    }

    // private async Task UploadFile(InputFileChangeEventArgs inputFile, int bookIndex)
    // {
    //     if (inputFile.File.ContentType.StartsWith("text"))
    //     {
    //         BookLoadTextModeDto bookWithTextOnly = new BookLoadTextModeDto();
    //         var buffer = new byte[inputFile.File.Size];
    //         await inputFile.File.OpenReadStream().ReadAsync(buffer);
    //         string textFromFile = System.Text.Encoding.UTF8.GetString(buffer);

    //         bookWithTextOnly.Text = textFromFile;
    //         await httpClient.PostAsJsonAsync($"https://localhost:7106/api/books/{bookIndex}/text", bookWithTextOnly);

    //         Snackbar.Add($"text loaded", Severity.Success);
    //         await table.ReloadServerData();
    //     }
    //     else
    //     {
    //         Snackbar.Add("File format not supported", Severity.Error);
    //     }
    // }

    void OpenSelectedBook(int indexBook)
    {

        navigationManager.NavigateTo($"/books/{indexBook}");
    }

    protected override async Task OnInitializedAsync()
    {
        await LoadBooksFromServer();
    }

    protected async Task LoadBooksFromServer()
    {
        _baseAddres = Configuration["BaseAddres"];
        var books = await httpClient.GetFromJsonAsync<List<BookDetailsDto>>($"{_baseAddres}/books");
        if (books != null)
        {
            _books = books;
        }
    }
}
