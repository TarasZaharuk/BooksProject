@page "/"
@inject HttpClient Http
@inject HttpClient httpClient
@using BookCore
@using System.Text.RegularExpressions
@using System.ComponentModel.DataAnnotations
@using System.Globalization
@using MudBlazor.Dialog

<PageTitle>Books</PageTitle>
<h1>Books</h1>
<MudTable Items="data" ServerData="@(new Func<TableState, Task<TableData<Book>>>(LoadData))"
          @ref="table" Height="80vh" Breakpoint="Breakpoint.Sm" HorizontalScrollbar="true">
    <ToolBarContent>
        <MudText Typo="Typo.h6">Books</MudText>
        <MudIconButton Icon="@Icons.Material.Outlined.Add" Color="Color.Success" OnClick="OpenDialog"></MudIconButton>
        <MudSpacer />
        <MudTextField T="string" ValueChanged="@(s=>OnSearch(s))" Placeholder="Search by Name" Adornment="Adornment.Start"
                      AdornmentIcon="@Icons.Material.Filled.Search" IconSize="Size.Medium" Class="mt-0"></MudTextField>
    </ToolBarContent>
    <HeaderContent>
        <MudTh><MudTableSortLabel SortLabel="name_field" T="Book">Name</MudTableSortLabel></MudTh>
        <MudTh>Author</MudTh>
        <MudTh>Description</MudTh>
        <MudTh>Date</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Rating</MudTh>
        @if (_books.Count > 0)
        {
            <MudTh><MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="Delete"></MudIconButton></MudTh>
        }
    </HeaderContent>
    <RowTemplate>
        <MudTd>@context.Name</MudTd>
        <MudTd>@context.Author</MudTd>
        <MudTd>@context.GetInfo()</MudTd>
        <MudTd>@context.DateOfPublishing</MudTd>
        @if (context.Status == Status.Draft)
        {
            <MudTd><MudImage Src="draftImage.png" Width="20" Height="20" /></MudTd>
        }
        @if (context.Status == Status.Active)
        {
            <MudTd><MudImage Src="activeImage.png" Width="20" Height="20" /></MudTd>
        }
        <MudTd>
            <div class="d-lg-table">
                <MudRating Disabled="true" @bind-SelectedValue="context.Rating" />
            </div>
        </MudTd>
        <MudTd><MudIconButton Icon="@Icons.Material.Filled.Delete" aria-label="delete" OnClick="()=>DeleteBook(_books.IndexOf(context))"></MudIconButton></MudTd>
    </RowTemplate>
</MudTable>

<MudDialog IsVisible="_isDialogVisible">
    <DialogContent>       
            <div class="d-flex flex-column">
                <MudGrid>
                <h1 class="mt-n3 mx-auto">Create book</h1>
                <MudTextField T="string" Class="mt-n8 mx-auto" Label="Name" Required="true" @bind-Value="@Name" RequiredError="Name is required!" AutoGrow="true" FullWidth="true" />
                <MudTextField T="string" Label="Author" Required="true" @bind-Value="@Author" RequiredError="Author is required!" AutoGrow="true" FullWidth="true" />
                <MudTextField T="string" Class="mt-n2 mx-auto" HelperText="Description is not required" Required="false" @bind-Value="@Description" Lines="4" FullWidth="true" />
                <MudDatePicker PickerVariant="PickerVariant.Dialog" @bind-Date="_date" Label="Change Date" Class="pa-3" MaxDate="DateTime.Now"></MudDatePicker>
                </MudGrid>
                <div class="align-self-sm-end">
                    <MudButton OnClick="@CloseDialog" Class="ml-auto mr-n3 mb-1" Color="Color.Error">Close</MudButton>
                    <MudButton Class="ml-auto mr-n3 mb-1" Color="Color.Success" Disabled="@CanCreateBook()" OnClick="CreateBook">Create</MudButton>
                </div>
            </div>
    </DialogContent>
</MudDialog>
@code {

    [Inject] 
    private IDialogService DialogService { get; set; } = null!;
    private IEnumerable<Book> data = null!;
    private List<Book> _books = new List<Book>();
    private MudTable<Book> table = null!;
    private Random _random = new Random();
    private DateTime? _date = DateTime.Now;
    private string? _searchString;
    private string Name { get; set; } = null!;
    private string Author { get; set; } = null!;
    private string Description { get; set; } = null!;
    private bool _isDialogVisible;

    public Books()
    {
        for (int i = 0; i < 50; i++)
        {
            if (i % 2 != 0)
            {
                _books.Add(new Book($"AName{i}", $"Author{i}", DateOnly.FromDateTime(DateTime.Now)));
                _books[i].Rating = _random.Next(1, 6);
            }
            else
            {
                _books.Add(new Book($"BName{i}", $"text{i}", $"Author{i}", DateOnly.FromDateTime(DateTime.Now)));
                _books[i].Rating = _random.Next(1, 6);
            }
        }
        data = _books;
    }

    private async Task<TableData<Book>> LoadData(TableState state)
    {
        IEnumerable<Book> data = _books;
        await Task.Delay(300);
        data = data.Where(element =>
        {
            if (string.IsNullOrWhiteSpace(_searchString))
                return true;
            if (element.Name.Contains(_searchString, StringComparison.OrdinalIgnoreCase))
                return true;
            return false;
        }).ToArray();
        switch (state.SortLabel)
        {
            case "name_field":
                data = data.OrderByDirection(state.SortDirection, o => o.Name);
                break;
        }
        return new TableData<Book>() { Items = data };
    }

    private void OnSearch(string text)
    {
        _searchString = text;
        table.ReloadServerData();
    }

    private async Task DeleteBook(int index)
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        $"Do you want to delete '{_books[index].Name}' book?",
        yesText: "Delete", cancelText: "Cancel");
        if (result == true)
        {
            _books.RemoveAt(index);
            await table.ReloadServerData();
        }
    }

    private async Task Delete()
    {
        bool? result = await DialogService.ShowMessageBox(
        "Warning",
        $"Do you want to delete {_books.Count} books?",
        yesText: "Delete", cancelText: "Cancel");

        if (result == true)
        {
            _books.Clear();
            await table.ReloadServerData();
        }
    }

    private async Task CreateBook()
    {
        if (_date.HasValue)
        {
            Book book = new Book(Name, Author, DateOnly.FromDateTime(_date.Value));
            book.Rating = _random.Next(1, 6);
            book.Description = Description;
            _books.Add(book);
            await table.ReloadServerData();
            _isDialogVisible = false;
        }
    }

    private bool CanCreateBook()
    {
        if (string.IsNullOrWhiteSpace(Name) || string.IsNullOrWhiteSpace(Author))
            return true;
        else
            return false;
    }

    private void OpenDialog()
    {
        _isDialogVisible = true;
    }

    private void CloseDialog()
    {
        _isDialogVisible = false;
    }
}
